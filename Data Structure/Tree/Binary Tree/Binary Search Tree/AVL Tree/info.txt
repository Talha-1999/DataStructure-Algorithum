AVL TREE :

AVL Trees is a Non-Linear Hierarchical Data Structure.

AVL tree ko agar Balanced krna ha to Rotation perfome krna parta ha warna wo
balanced nahi rahy ga.

1 : Height balanced binary Search Tree.
2 : Difference b/w height of left subtree and right subtree for every node is less than
    or equal to 1.
3 : Balanced factor = height of right subtree - height of left subtree.
4 : Can be -1,0 or 1 for a node to be balanced in a Binary Search Tree.
5 : Can be -1,0 or 1 for all nodes of a AVL tree.

Rotation :
Basic Rotation : 
1 : LR => Left rotate wrt a node - Node is moved towards the Left.
2 : RL => Right rotate wrt a node - Node is moved towards the Right.

Balanced a AVL Tree after Insertion :
In order to balance AVL tree after insertion,we can follow the following rules.

1 : For a Left-Left Insertion - Right rotate once with respect to first
    imbalanced node.
2 : For a Right-Right Insertion - Left rotate once with respect to first
    imbalanced node.
3 : For a Left-Right Insertion - Left rotate once with respect to child of first
    imbalanced node and then Right rotate once with respect to first imbalanced node.
4 : For a Right-Left Insertion - Right rotate once with respect to child of first
    imbalanced node and then Left rotate once with respect to first imbalanced node.

 
Right Rotation : 

        8     -----> Right Rotate      5
       / \                            / \
      5   10                         3   8
     / \                                / \ 
    3   7     Left Rotate <-------     7   10